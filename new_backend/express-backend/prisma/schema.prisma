// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id          String   @id @default(cuid())
  name        String
  domain      String?  @unique
  apiKey      String   @unique @default(cuid())
  settings    Json?    // tenant-specific settings
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users    User[]
  agents   Agent[]
  documents Document[]

  @@map("tenants")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agents Agent[]

  @@map("users")
}

model Agent {
  id             String   @id @default(cuid())
  name           String
  systemPrompt   String?
  voiceType      String?  @default("female")
  llmPreferences Json?    // e.g., { model: "grok", temperature: 0.7 }
  tokenLimit     Int?     @default(4096)
  contextWindowStrategy String? @default("condense")
  tenantId       String
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  documents Document[]

  @@map("agents")
}

model Document {
  id          String   @id @default(cuid())
  url         String?
  s3Path      String?
  status      String   @default("pending") // pending, processing, completed, failed
  title       String?
  content     String?
  metadata    Json?    // extracted metadata
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  agentId     String
  agent       Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("documents")
}
